# Default values for cloudflare-access-webhook-redirect
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: timmi6790/cloudflare-access-webhook-redirect
  tag: v0.3.3
  pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
  # Whether to automount the service account token
  automountToken: false

# Priority class for pod scheduling
priorityClassName: ""
podAnnotations: {}
podLabels: {}

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 10001
  fsGroup: 10001

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: false

application:
  logLevel: info
  sentryDsn: ""
  server:
    port: 8080
    host: 0.0.0.0

  handler:
    targetBase: ""
    paths: {}
    # Example:
    # api/webhook:
    #   - ALL
    # test:
    #   - GET
    #   - POST

  cloudflareAccess:
    # Existing secret name with the cloudflare access tokens with client_id and client_secret
    secretName: ""
    # Alternative: provide values directly (will create secret)
    # clientId: ""
    # clientSecret: ""

service:
  type: ClusterIP
  port: 80
  annotations: {}

ingress:
  enabled: false
  ingressClassName: "nginx"
  annotations: {}
  # cert-manager.io/cluster-issuer: letsencrypt-prod
  # nginx.ingress.kubernetes.io/rate-limit: "100"
  hosts: []
    # - host: chart-example.local
    #   paths:
    #     - path: /
    #       pathType: Prefix
  tls: []
    # - secretName: chart-example-tls
    #   hosts:
    #     - chart-example.local

resources:
  limits:
    cpu: 100m
    memory: 15Mi
  requests:
    cpu: 10m
    memory: 10Mi

startupProbe:
  enabled: true
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 0
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 30
  successThreshold: 1

livenessProbe:
  enabled: true
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  enabled: true
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# Pod Topology Spread Constraints for better availability
topologySpreadConstraints: []
# - maxSkew: 1
#   topologyKey: kubernetes.io/hostname
#   whenUnsatisfiable: ScheduleAnyway
#   labelSelector:
#     matchLabels:
#       app.kubernetes.io/name: cloudflare-access-webhook-redirect
# - maxSkew: 1
#   topologyKey: topology.kubernetes.io/zone
#   whenUnsatisfiable: ScheduleAnyway

# Additional volumes on the output Deployment definition.
volumes: []
# - name: cache
#   emptyDir: {}

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: cache
#   mountPath: /cache

nodeSelector: {}

tolerations: []

affinity: {}

# Pod Disruption Budget
podDisruptionBudget:
  enabled: false
  minAvailable: 1
  # maxUnavailable: 1

# Network Policy
networkPolicy:
  enabled: false
  policyTypes:
    - Ingress
    - Egress
  ingress: []
  # - from:
  #   - namespaceSelector:
  #       matchLabels:
  #         name: ingress-nginx
  #   ports:
  #   - protocol: TCP
  #     port: 8080
  egress: []
  # - to:
  #   - namespaceSelector: {}
  #   ports:
  #   - protocol: TCP
  #     port: 443
