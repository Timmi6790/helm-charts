{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "additionalProperties": false,
  "properties": {
    "application": {
      "additionalProperties": true,
      "properties": {
        "handler": {
          "additionalProperties": false,
          "description": "Handler configuration defining static routes and their S3 mappings.\nEach key represents a URL path, and the value is a list of \"bucket,file\" pairs.\nExample:\n```yaml\nhandler:\n  entries:\n    myfile: [\"bucket1,file.txt\"]\n    mydir: [\"bucket2,dir/index.html\"]\n```",
          "properties": {
            "entries": {
              "additionalProperties": false,
              "required": [],
              "title": "entries",
              "type": "object"
            }
          },
          "required": [
            "entries"
          ],
          "title": "handler",
          "type": "object"
        },
        "logLevel": {
          "default": "info",
          "description": "Log level for application output.",
          "enum": [
            "debug",
            "info",
            "warn",
            "error"
          ],
          "required": [],
          "title": "logLevel"
        },
        "s3": {
          "additionalProperties": true,
          "description": "Configuration for connecting to an S3-compatible service.",
          "properties": {
            "host": {
              "default": "s3.amazon.com",
              "description": "S3-compatible API endpoint.\nExample: \"https://s3.amazonaws.com\" or \"https://minio.yourdomain.com\"",
              "required": [],
              "title": "host",
              "type": "string"
            },
            "region": {
              "default": "eu-central-1",
              "description": "AWS region or S3 region identifier.\nUsed for authenticating with region-specific endpoints.",
              "required": [],
              "title": "region",
              "type": "string"
            },
            "secretName": {
              "default": "",
              "description": "Name of an existing Kubernetes Secret containing S3 credentials.\nThe secret must include `access_key` and `secret_key` fields.",
              "required": [],
              "title": "secretName",
              "type": "string"
            }
          },
          "required": [],
          "title": "s3"
        },
        "sentryDsn": {
          "default": "",
          "description": "Sentry DSN for error tracking and reporting.\nLeave empty to disable Sentry integration.",
          "required": [],
          "title": "sentryDsn",
          "type": "string"
        },
        "server": {
          "additionalProperties": true,
          "description": "HTTP server configuration.\nDefines where the application listens for incoming connections.",
          "properties": {
            "host": {
              "default": "0.0.0.0",
              "description": "Host address to bind the HTTP server.\nTypically `0.0.0.0` to listen on all network interfaces.",
              "required": [],
              "title": "host",
              "type": "string"
            },
            "port": {
              "default": 8080,
              "description": "Port number the server listens on.",
              "required": [],
              "title": "port",
              "type": "integer"
            }
          },
          "required": [],
          "title": "server"
        }
      },
      "required": [],
      "title": "application"
    },
    "common": {
      "description": "Common helper templates for all charts",
      "required": [],
      "title": "common",
      "type": "object"
    },
    "global": {
      "description": "Global values are values that can be accessed from any chart or subchart by exactly the same name.",
      "required": [],
      "title": "global",
      "type": "object"
    },
    "image": {
      "additionalProperties": true,
      "properties": {
        "pullPolicy": {
          "default": "IfNotPresent",
          "description": "Kubernetes image pull policy.\nDetermines when the image should be pulled from the registry.",
          "enum": [
            "Always",
            "IfNotPresent",
            "Never"
          ],
          "required": [],
          "title": "pullPolicy"
        },
        "repository": {
          "default": "timmi6790/s3-bucket-perma-link",
          "description": "Container image repository where the application image is stored.\nUsually points to Docker Hub or a private registry.\nExample: ghcr.io/your-org/s3-bucket-perma-link",
          "required": [],
          "title": "repository",
          "type": "string"
        },
        "tag": {
          "default": "v0.2.2",
          "description": "Container image tag to deploy.\nPin to a version for predictable deployments rather than using \"latest\".",
          "required": [],
          "title": "tag",
          "type": "string"
        }
      },
      "required": [],
      "title": "image"
    },
    "ingress": {
      "additionalProperties": true,
      "properties": {
        "annotations": {
          "additionalProperties": false,
          "description": "Custom annotations for the Ingress resource.\nUseful for configuring ingress controllers (e.g., cert-manager, rate limits).",
          "required": [],
          "title": "annotations",
          "type": "object"
        },
        "enabled": {
          "default": false,
          "description": "Enable or disable Kubernetes Ingress resource creation.\nSet to `true` to expose the service externally via Ingress.",
          "required": [],
          "title": "enabled",
          "type": "boolean"
        },
        "hosts": {
          "description": "List of host configurations for the Ingress.\nEach host defines rules for routing external traffic.\nExample:\n```yaml\nhosts:\n  - host: s3.example.com\n    paths:\n      - path: /\n        pathType: Prefix\n```",
          "items": {
            "required": []
          },
          "required": [],
          "title": "hosts",
          "type": "array"
        },
        "ingressClassName": {
          "default": "nginx",
          "description": "Ingress class to use (e.g., \"nginx\", \"traefik\").\nShould match your clusterâ€™s ingress controller configuration.",
          "required": [],
          "title": "ingressClassName",
          "type": "string"
        },
        "tls": {
          "description": "TLS configuration for securing ingress connections.\nExample:\n```yaml\ntls:\n  - secretName: s3-cert\n    hosts:\n      - s3.example.com\n```",
          "items": {
            "required": []
          },
          "required": [],
          "title": "tls",
          "type": "array"
        }
      },
      "required": [],
      "title": "ingress"
    },
    "podSecurityContext": {
      "additionalProperties": true,
      "properties": {
        "allowPrivilegeEscalation": {
          "default": false,
          "description": "Allow privilege escalation",
          "required": [],
          "title": "allowPrivilegeEscalation",
          "type": "boolean"
        },
        "fsGroup": {
          "default": 1000,
          "description": "Group ID for file system access",
          "required": [],
          "title": "fsGroup",
          "type": "integer"
        },
        "readOnlyRootFilesystem": {
          "default": true,
          "description": "Mount root filesystem as read-only",
          "required": [],
          "title": "readOnlyRootFilesystem",
          "type": "boolean"
        },
        "runAsNonRoot": {
          "default": true,
          "description": "Run pod as non-root user",
          "required": [],
          "title": "runAsNonRoot",
          "type": "boolean"
        },
        "runAsUser": {
          "default": 1000,
          "description": "User ID to run as",
          "required": [],
          "title": "runAsUser",
          "type": "integer"
        }
      },
      "required": [],
      "title": "podSecurityContext"
    },
    "resources": {
      "additionalProperties": true,
      "properties": {
        "limits": {
          "additionalProperties": true,
          "description": "Resource limits define the maximum resources the container can use.",
          "properties": {
            "memory": {
              "default": "20Mi",
              "description": "Maximum memory allocation for the container.",
              "required": [],
              "title": "memory",
              "type": "string"
            }
          },
          "required": [],
          "title": "limits"
        },
        "requests": {
          "additionalProperties": true,
          "description": "Resource requests define the guaranteed resources reserved for the container.",
          "properties": {
            "memory": {
              "default": "15Mi",
              "description": "Minimum memory requested by the container.",
              "required": [],
              "title": "memory",
              "type": "string"
            }
          },
          "required": [],
          "title": "requests"
        }
      },
      "required": [],
      "title": "resources"
    },
    "service": {
      "additionalProperties": true,
      "properties": {
        "port": {
          "default": 80,
          "description": "Port that the Kubernetes Service will expose.\nTypically maps to `application.server.port`.",
          "required": [],
          "title": "port",
          "type": "integer"
        },
        "type": {
          "default": "ClusterIP",
          "description": "Kubernetes Service type that exposes the application.",
          "enum": [
            "ClusterIP",
            "NodePort",
            "LoadBalancer"
          ],
          "required": [],
          "title": "type"
        }
      },
      "required": [],
      "title": "service"
    }
  },
  "required": [],
  "type": "object"
}