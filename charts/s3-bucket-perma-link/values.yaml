# vim: set ft=yaml:
# yaml-language-server: $schema=values.schema.json

# @schema
# additionalProperties: true
# @schema
image:
  # @schema
  # type: string
  # @schema
  # -- Container image repository where the application image is stored.
  # Usually points to Docker Hub or a private registry.
  # Example: ghcr.io/your-org/s3-bucket-perma-link
  repository: timmi6790/s3-bucket-perma-link

  # @schema
  # type: string
  # @schema
  # -- Container image tag to deploy.
  # Pin to a version for predictable deployments rather than using "latest".
  tag: v0.2.2

  # @schema
  # enum: [Always, IfNotPresent, Never]
  # @schema
  # -- Kubernetes image pull policy.
  # Determines when the image should be pulled from the registry.
  pullPolicy: IfNotPresent

# @schema
# additionalProperties: true
# @schema
application:
  # @schema
  # enum: [debug, info, warn, error]
  # @schema
  # -- Log level for application output.
  logLevel: info

  # @schema
  # type: string
  # @schema
  # -- Sentry DSN for error tracking and reporting.
  # Leave empty to disable Sentry integration.
  sentryDsn: ""

  # @schema
  # additionalProperties: true
  # @schema
  # -- HTTP server configuration.
  # Defines where the application listens for incoming connections.
  server:
    # @schema
    # type: integer
    # @schema
    # -- Port number the server listens on.
    port: 8080

    # @schema
    # type: string
    # @schema
    # -- Host address to bind the HTTP server.
    # Typically `0.0.0.0` to listen on all network interfaces.
    host: 0.0.0.0

  # @schema
  # type: object
  # @schema
  # -- Handler configuration defining static routes and their S3 mappings.
  # Each key represents a URL path, and the value is a list of "bucket,file" pairs.
  # Example:
  # ```yaml
  # handler:
  #   entries:
  #     myfile: ["bucket1,file.txt"]
  #     mydir: ["bucket2,dir/index.html"]
  # ```
  handler:
    entries: {}

  # @schema
  # additionalProperties: true
  # @schema
  # -- Configuration for connecting to an S3-compatible service.
  s3:
    # @schema
    # type: string
    # @schema
    # -- Name of an existing Kubernetes Secret containing S3 credentials.
    # The secret must include `access_key` and `secret_key` fields.
    secretName: ""

    # @schema
    # type: string
    # @schema
    # -- S3-compatible API endpoint.
    # Example: "https://s3.amazonaws.com" or "https://minio.yourdomain.com"
    host: "s3.amazon.com"

    # @schema
    # type: string
    # @schema
    # -- AWS region or S3 region identifier.
    # Used for authenticating with region-specific endpoints.
    region: "eu-central-1"

# @schema
# additionalProperties: true
# @schema
podSecurityContext:
  # @schema
  # type: boolean
  # @schema
  # -- Run pod as non-root user
  runAsNonRoot: true

  # @schema
  # type: boolean
  # @schema
  # -- Mount root filesystem as read-only
  readOnlyRootFilesystem: true

  # @schema
  # type: boolean
  # @schema
  # -- Allow privilege escalation
  allowPrivilegeEscalation: false

  # @schema
  # type: integer
  # @schema
  # -- User ID to run as
  runAsUser: 1000

  # @schema
  # type: integer
  # @schema
  # -- Group ID for file system access
  fsGroup: 1000

# @schema
# additionalProperties: true
# @schema
service:
  # @schema
  # enum: [ClusterIP, NodePort, LoadBalancer]
  # @schema
  # -- Kubernetes Service type that exposes the application.
  type: ClusterIP

  # @schema
  # type: integer
  # @schema
  # -- Port that the Kubernetes Service will expose.
  # Typically maps to `application.server.port`.
  port: 80

# @schema
# additionalProperties: true
# @schema
ingress:
  # @schema
  # type: boolean
  # @schema
  # -- Enable or disable Kubernetes Ingress resource creation.
  # Set to `true` to expose the service externally via Ingress.
  enabled: false

  # @schema
  # type: string
  # @schema
  # -- Ingress class to use (e.g., "nginx", "traefik").
  # Should match your clusterâ€™s ingress controller configuration.
  ingressClassName: "nginx"

  # @schema
  # type: object
  # @schema
  # -- Custom annotations for the Ingress resource.
  # Useful for configuring ingress controllers (e.g., cert-manager, rate limits).
  annotations: {}

  # @schema
  # type: array
  # @schema
  # -- List of host configurations for the Ingress.
  # Each host defines rules for routing external traffic.
  # Example:
  # ```yaml
  # hosts:
  #   - host: s3.example.com
  #     paths:
  #       - path: /
  #         pathType: Prefix
  # ```
  hosts: []

  # @schema
  # type: array
  # @schema
  # -- TLS configuration for securing ingress connections.
  # Example:
  # ```yaml
  # tls:
  #   - secretName: s3-cert
  #     hosts:
  #       - s3.example.com
  # ```
  tls: []

# @schema
# additionalProperties: true
# @schema
resources:
  # @schema
  # additionalProperties: true
  # @schema
  # -- Resource limits define the maximum resources the container can use.
  limits:
    # @schema
    # type: string
    # @schema
    # -- Maximum memory allocation for the container.
    memory: 20Mi

  # @schema
  # additionalProperties: true
  # @schema
  # -- Resource requests define the guaranteed resources reserved for the container.
  requests:
    # @schema
    # type: string
    # @schema
    # -- Minimum memory requested by the container.
    memory: 15Mi
