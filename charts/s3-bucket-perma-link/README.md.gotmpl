{{ template "chart.header" . }}

{{ template "chart.deprecationWarning" . }}

{{ template "chart.badgesSection" . }}

{{ template "chart.description" . }}

This chart deploys a simple web server that provides permanent links to specific S3 bucket resources. It allows you to define static URL paths that always point to specific files in your S3 buckets.

## Prerequisites

- Kubernetes 1.19+
- Helm 3.0+
- S3-compatible storage with access credentials

## Get Repository Info

```shell
helm repo add timmi6790 https://timmi6790.github.io/helm-charts
helm repo update
```

## Install Chart

```shell
helm install [RELEASE_NAME] timmi6790/{{ template "chart.name" . }} \
  --namespace [NAMESPACE] \
  --create-namespace \
  --set application.s3.secretName="s3-credentials"
```

## Upgrade Chart

```shell
helm upgrade [RELEASE_NAME] timmi6790/{{ template "chart.name" . }} \
  --namespace [NAMESPACE]
```

## Uninstall Chart

```shell
helm uninstall [RELEASE_NAME] --namespace [NAMESPACE]
```

## Configuration

The following table lists the configurable parameters of the chart and their default values.

{{ template "chart.valuesSection" . }}

## S3 Secret Configuration

Create a Kubernetes secret with your S3 credentials:

```bash
kubectl create secret generic s3-credentials \
  --namespace [NAMESPACE] \
  --from-literal=access_key='your-access-key' \
  --from-literal=secret_key='your-secret-key'
```

The secret must contain the following keys:
- `access_key`: Your S3 access key
- `secret_key`: Your S3 secret key

## Path Configuration

Define URL paths that map to S3 bucket files using the `application.handler.entries` configuration:

```yaml
application:
  handler:
    entries:
      # URL path -> ["bucket-name,path/to/file"]
      myfile:
        - "my-bucket,documents/file.pdf"
      report:
        - "reports-bucket,2024/annual-report.pdf"
```

With this configuration:
- `http://your-service/myfile` will serve `documents/file.pdf` from `my-bucket`
- `http://your-service/report` will serve `2024/annual-report.pdf` from `reports-bucket`

## Examples

### Minimal Configuration

```yaml
application:
  handler:
    entries:
      myfile:
        - "my-bucket,path/to/file.txt"

  s3:
    secretName: "s3-credentials"
    host: "s3.amazonaws.com"
    region: "us-east-1"
```

### With Custom S3 Endpoint (MinIO, etc.)

```yaml
application:
  handler:
    entries:
      data:
        - "data-bucket,exports/data.csv"
      backup:
        - "backup-bucket,latest/backup.tar.gz"

  s3:
    secretName: "s3-credentials"
    host: "minio.example.com:9000"
    region: "us-east-1"

resources:
  limits:
    memory: 30Mi
  requests:
    memory: 20Mi
```

### With Ingress and TLS

```yaml
application:
  handler:
    entries:
      report:
        - "reports-bucket,2024/report.pdf"
      data:
        - "data-bucket,exports/data.csv"

  s3:
    secretName: "s3-credentials"
    host: "s3.eu-central-1.amazonaws.com"
    region: "eu-central-1"

ingress:
  enabled: true
  ingressClassName: "nginx"
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
  hosts:
    - host: files.example.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: files-tls
      hosts:
        - files.example.com
```

### Advanced Configuration with Multiple Files

```yaml
application:
  logLevel: debug

  handler:
    entries:
      # Multiple files can be served from different buckets
      latest-report:
        - "company-reports,2024/q4-report.pdf"
      user-guide:
        - "documentation,guides/user-guide.pdf"
      api-docs:
        - "documentation,api/v2/openapi.yaml"
      backup:
        - "backups,daily/latest.tar.gz"

  s3:
    secretName: "s3-credentials"
    host: "s3.amazonaws.com"
    region: "us-east-1"

service:
  type: ClusterIP
  port: 80

resources:
  limits:
    memory: 25Mi
  requests:
    memory: 15Mi
```

## How It Works

1. The service receives a request at a defined path (e.g., `/myfile`)
2. It looks up the path in the `entries` configuration
3. It retrieves the corresponding file from the S3 bucket
4. The file is served directly to the client

This is useful for:
- Providing stable URLs to frequently changing S3 objects
- Creating short, memorable links to S3 resources
- Simplifying access to S3 files without exposing bucket structure

{{ template "chart.sourcesSection" . }}

{{ template "chart.maintainersSection" . }}

{{ template "helm-docs.versionFooter" . }}

